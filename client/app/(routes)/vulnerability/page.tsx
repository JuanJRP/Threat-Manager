"use client";
import Button from "@/app/components/Button";
import Nav from "@/app/components/Navbar";
import React, { useState, useEffect } from "react";
import Search from "./components/search/search";
import DatosVulnerability from "./interfaces/interfacevulnerability";
import Table from "./components/Table";
import { FaCirclePlus } from "react-icons/fa6";
import { Rows } from "lucide-react";
import logo from "../../public/gestion-de-vulnerabilidades.webp";
import Image from "next/image";
import Pagination from "../assets/components/DataTable/Pagination";
import { Asset, Column } from "./components/Interface";
import DeleteModal from "../assets/components/Modals/DeleteModal";
import { DeleteAssetById } from "./vulnerabilityServices";
import EditAssetModal from "./components/modals/EditAssets";

import AddAssetModal from "./components/modals/AddAssets";


const ROWS_PER_PAGE = 6;

const Page: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [editRow, setEditRow] = useState<DatosVulnerability | null>(null);
  const [deleteId, setDeleteId] = useState<number | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [assets, setAssets] = useState<Asset[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [assetToDelete, setAssetToDelete] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [columns, setColumns] = useState<Column[]>([]);
  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [filteredAssets, setFilteredAssets] = useState<Asset[]>([]);
  const [selectedVunerability, setSelecteVunerability] = useState<Asset | null>(null);
  
  const fetchAssets = async () => {
    setError(null);
    try {
      const response = await fetch("http://localhost:3001/api/vulnerability/");
      if (!response.ok) {
        throw new Error("Error al obtener los datos");
      }
      const data = await response.json();
      setAssets(data);
      setFilteredAssets(data);
      if (data.length > 0) {
        const initialColumns = Object.keys(data[0]).map((key) => ({
          key,
          label: key.charAt(0).toUpperCase() + key.slice(1),
          type: "string", // or any default type you want to set
          visible: true,
        }));
        setColumns(initialColumns);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error desconocido");
    } finally {
      setIsLoading(false);
    }
  };
  
  useEffect(() => {
    fetchAssets();
  }, []);

  const handleDelete = async () => {
    if (assetToDelete) {
      try {
        await DeleteAssetById(assetToDelete);
        await fetchAssets();
        setIsDeleteModalOpen(false);
        setAssetToDelete(null);
      } catch (err) {
        setError(err instanceof Error ? err.message : "Error desconocido");
      }
    }
  };

  const handlePreviousPage = () => {
    setCurrentPage((prev) => Math.max(prev - 1, 1));
  };

  const handleNextPage = () => {
    setCurrentPage((prev) => Math.min(prev + 1, totalPages));
  };

  const handleEdit = (row: DatosVulnerability) => {
    setEditRow(row);
  };

  const totalPages = Math.ceil(filteredAssets.length / ROWS_PER_PAGE);
  const startIndex = (currentPage - 1) * ROWS_PER_PAGE;
  const endIndex = startIndex + ROWS_PER_PAGE;
  const currentAssets = filteredAssets.slice(startIndex, endIndex);

  return (
    <div className="">
      <Nav title="Vulnerabilidades"/>
      <div className="flex  items-center px-4">
        <div className=" w-3/5 -ml-4 self-start">
          <Search searchTerm={searchTerm} onSearch={setSearchTerm} />
        </div>
        <div className="drop-shadow-2xl flex">
          <Image
            src={logo}
            alt="logo"
            className="flex-"
            width={350}
            height={100}
          />
        </div>
      </div>
      <div className=" -mt-28 drop-shadow-2xl">
        <Button
          onClick={() => setIsAddModalOpen(true)}
          value="Agregar Vulnerabilidad"
          color="900"
          hover="hover: bg-cPurple-900"
          icon={<FaCirclePlus />}
        />
      </div>
      <div className="mt-40 ml-2 mr-2 drop-shadow-2xl">
        <Table
          columns={columns}
          currentAssets={currentAssets}
          onEdit={(asset) => {
            setSelectedAsset(asset);
            setIsEditModalOpen(true);
          }}
          onDelete={(assetId) => {
            setAssetToDelete(assetId);
            setIsDeleteModalOpen(true);
          }}
        />
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          startIndex={startIndex}
          endIndex={endIndex}
          totalItems={filteredAssets.length}
          onPreviousPage={handlePreviousPage}
          onNextPage={handleNextPage}
      />
      <DeleteModal
        isOpen={isDeleteModalOpen}
        onClose={() => {
          setIsDeleteModalOpen(false);
          setAssetToDelete(null);
        }}
        onConfirm={handleDelete}
        itemName="La Vulnerabilidad"
      />
      </div>
      <AddAssetModal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        onAssetAdded={fetchAssets}
        columns={columns}
        name="Vulnerabilidad"
      />
      <EditAssetModal
        isOpen={isEditModalOpen}
        onClose={() => {
          setIsEditModalOpen(false);
          setSelectedAsset(null);
        }}
        asset={selectedAsset}
        onAssetUpdated={fetchAssets}
        columns={columns}
        name="vulnerabilidad"
      />
    </div>
  );
};

export default Page;
