import { Request, Response } from 'express';
import * as vulnerabilityService from './vulnerability.services';

// Crear vulnerabilidad
export const createVulnerability = async (req: Request, res: Response) => {
    try {
        const vulnerability = await vulnerabilityService.createVulnerability(req.body);
        res.status(201).json(vulnerability);
    } catch (error) {
        res.status(500).json({ message: 'Error al crear la vulnerabilidad', error });
    }
};

// Importar varias vulnerabilidades
export const importVulnerabilities = async (req: Request, res: Response) => {
    try {
        const vulnerabilities = await vulnerabilityService.importVulnerabilities(req.body);
        res.status(201).json(vulnerabilities);
    } catch (error) {
        res.status(500).json({ message: 'Error al importar vulnerabilidades', error });
    }
};

// Consultar vulnerabilidades y sus controles asociados
export const getVulnerabilities = async (req: Request, res: Response) => {
    try {
        const vulnerabilities = await vulnerabilityService.getVulnerabilities();
        res.status(200).json(vulnerabilities);
    } catch (error) {
        res.status(500).json({ message: 'Error al consultar vulnerabilidades', error });
    }
};

// Modificar vulnerabilidad
export const updateVulnerability = async (req: Request, res: Response) => {
    try {
        const id = parseInt(req.params.id);  // Convertir req.params.id a número
        const vulnerability = await vulnerabilityService.updateVulnerability(id, req.body);
        res.status(200).json(vulnerability);
    } catch (error) {
        res.status(500).json({ message: 'Error al modificar la vulnerabilidad', error });
    }
};

// Eliminar vulnerabilidad
export const deleteVulnerability = async (req: Request, res: Response) => {
    try {
        const id = parseInt(req.params.id);  // Convertir req.params.id a número
        await vulnerabilityService.deleteVulnerability(id);
        res.status(200).json({ message: 'Vulnerabilidad eliminada' });
    } catch (error) {
        res.status(500).json({ message: 'Error al eliminar la vulnerabilidad', error });
    }
};

// Eliminar varias vulnerabilidades
export const deleteVulnerabilities = async (req: Request, res: Response) => {
    try {
        const ids = req.body.ids.map((id: string) => parseInt(id));  // Convertir a número cada id
        await vulnerabilityService.deleteVulnerabilities(ids);
        res.status(200).json({ message: 'Vulnerabilidades eliminadas' });
    } catch (error) {
        res.status(500).json({ message: 'Error al eliminar vulnerabilidades', error });
    }
};
