import VulnerabilityService from "./vulnerability.services";
import { VulnerabilityDTO } from "./vulnerability.models";
import { Request, Response } from "express";

export class VulnerabilityController {
  async createVulnerability(req: Request, res: Response): Promise<void> {
    const vulnerabilityDTO: VulnerabilityDTO = req.body;
    try {
      const vulnerability = await VulnerabilityService.createVulnerability(
        vulnerabilityDTO
      );
      res.status(201).json(vulnerability);
    } catch (err) {
      res
        .status(500)
        .json({ message: "Error creating the vulnerability", err });
    }
  }

  // Obtener todas las vulnerabilidades
  async getAllVulnerabilities(req: Request, res: Response): Promise<void> {
    try {
      const vulnerabilities =
        await VulnerabilityService.getAllVulnerabilities();
      res.status(200).json(vulnerabilities);
    } catch (err) {
      res
        .status(500)
        .json({ message: "Error getting the vulnerabilities", err });
    }
  }

  async getVulnerabilityById(req: Request, res: Response): Promise<void> {
    const id = parseInt(req.params.id);
    try {
      const vulnerability = await VulnerabilityService.getVulnerabilityById(id);
      res.status(200).json(vulnerability);
    } catch (err) {
      res.status(500).json({ message: "Error getting the vulnerability", err });
    }
  }

  async updateVulnerabilityById(req: Request, res: Response): Promise<void> {
    const id = parseInt(req.params.id);
    try {
      const vulnerabilityDTO: Partial<VulnerabilityDTO> = req.body;
      const vulnerability = await VulnerabilityService.updateVulnerabilityById(
        id,
        vulnerabilityDTO
      );
      res.status(200).json(vulnerability);
    } catch (err) {
      res
        .status(500)
        .json({ message: "Error updating the vulnerability", err });
    }
  }

  async deleteVulnerabilityById(req: Request, res: Response): Promise<void> {
    const id = parseInt(req.params.id);
    try {
      await VulnerabilityService.deleteVulnerabilityById(id);
      res.status(200).json({ message: "Vulnerability eliminated correctly" });
    } catch (err) {
      res
        .status(500)
        .json({ message: "Error deleting the vulnerability", err });
    }
  }
}
